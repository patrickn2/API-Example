// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/patrickn2/api-challenge/interfaces"
	mock "github.com/stretchr/testify/mock"

	schema "github.com/patrickn2/api-challenge/schema"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// GetClerks provides a mock function with given fields: _a0
func (_m *MockUserRepository) GetClerks(_a0 *interfaces.GetClerksParams) ([]*schema.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetClerks")
	}

	var r0 []*schema.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*interfaces.GetClerksParams) ([]*schema.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*interfaces.GetClerksParams) []*schema.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*schema.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*interfaces.GetClerksParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetClerks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClerks'
type MockUserRepository_GetClerks_Call struct {
	*mock.Call
}

// GetClerks is a helper method to define mock.On call
//   - _a0 *interfaces.GetClerksParams
func (_e *MockUserRepository_Expecter) GetClerks(_a0 interface{}) *MockUserRepository_GetClerks_Call {
	return &MockUserRepository_GetClerks_Call{Call: _e.mock.On("GetClerks", _a0)}
}

func (_c *MockUserRepository_GetClerks_Call) Run(run func(_a0 *interfaces.GetClerksParams)) *MockUserRepository_GetClerks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*interfaces.GetClerksParams))
	})
	return _c
}

func (_c *MockUserRepository_GetClerks_Call) Return(_a0 []*schema.User, _a1 error) *MockUserRepository_GetClerks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetClerks_Call) RunAndReturn(run func(*interfaces.GetClerksParams) ([]*schema.User, error)) *MockUserRepository_GetClerks_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUsers provides a mock function with given fields: _a0
func (_m *MockUserRepository) InsertUsers(_a0 []*schema.User) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertUsers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]*schema.User) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]*schema.User) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]*schema.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_InsertUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUsers'
type MockUserRepository_InsertUsers_Call struct {
	*mock.Call
}

// InsertUsers is a helper method to define mock.On call
//   - _a0 []*schema.User
func (_e *MockUserRepository_Expecter) InsertUsers(_a0 interface{}) *MockUserRepository_InsertUsers_Call {
	return &MockUserRepository_InsertUsers_Call{Call: _e.mock.On("InsertUsers", _a0)}
}

func (_c *MockUserRepository_InsertUsers_Call) Run(run func(_a0 []*schema.User)) *MockUserRepository_InsertUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*schema.User))
	})
	return _c
}

func (_c *MockUserRepository_InsertUsers_Call) Return(_a0 int, _a1 error) *MockUserRepository_InsertUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_InsertUsers_Call) RunAndReturn(run func([]*schema.User) (int, error)) *MockUserRepository_InsertUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
